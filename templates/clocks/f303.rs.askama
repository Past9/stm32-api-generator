
use crate::{Error, Result};

#[inline]
fn validate_in_range(val: u32, min: u32, max: u32) -> Result<()> {
  if val < min || val > max {
    return Err(Error::new("Value is outside of valid range."));
  }
  Ok(())
}

#[inline]
fn validate_in_set(val: u32, set: &[u32]) -> Result<()> {
  if !set.contains(&val) {
    return Err(Error::new("Value is outside of valid set."));
  }
  Ok(())
}

pub enum PllSource {
  Hsi,
  Hse(u32),
}
impl PllSource {
  pub fn validate(&self) -> Result<()> {
    if let Self::Hse(div) = self {
      validate_in_range(*div, 1, 16)?;
    }
    Ok(())
  }
}

pub enum SysClkSource {
  Hsi,
  Hse,
  PllClk,
}

pub enum McoSource {
  Hsi,
  Lse,
  Hse,
  PllClk,
  Lsi,
  SysClk,
}

pub struct ClockConfig {
  hse_freq: u32,
  lse_freq: u32,
  hsi_freq: u32,
  lsi_freq: u32,
  pll_source: PllSource,
  pll_mult: u32,
  sysclk_source: SysClkSource,
  mco_source: McoSource,
  ahb_prescaler_div: u32,
  cortex_systimer_div: u32,
  apb1_prescaler_div: u32,
  apb2_prescaler_div: u32,
}
impl ClockConfig {
  pub fn new(hse_freq: u32, lse_freq: u32, hsi_freq: u32, lsi_freq: u32) -> Self {
    Self {
      hse_freq,
      lse_freq,
      hsi_freq,
      lsi_freq,
      pll_source: Self::read_pll_source(),
      pll_mult: Self::read_pll_mult(),
      sysclk_source: Self::read_sysclk_source(),
      mco_source: Self::read_mco_source(),
      ahb_prescaler_div: Self::read_ahb_prescaler_div(),
      cortex_systimer_div: Self::read_cortex_systimer_div(),
      apb1_prescaler_div: Self::read_apb1_prescaler_div(),
      apb2_prescaler_div: Self::read_apb2_prescaler_div(),
    }
  }

  fn read_pll_source() -> PllSource {
    // TODO: Read
    PllSource::Hsi
  }

  fn read_pll_mult() -> u32 {
    // TODO: Read
    2
  }

  pub fn configure_pll(&mut self, source: PllSource, multiplier: u32) -> Result<()> {
    source.validate()?;
    validate_in_range(multiplier, 2, 16)?;

    // TODO: Write
    self.pll_source = source;
    self.pll_mult = multiplier;
    Ok(())
  }

  pub fn get_pll_freq(&self) -> u32 {
    self.pll_mult
      * match self.pll_source {
        PllSource::Hsi => self.hsi_freq / 2,
        PllSource::Hse(div) => self.hse_freq / div,
      }
  }

  fn read_sysclk_source() -> SysClkSource {
    // TODO: Read
    SysClkSource::Hsi
  }

  pub fn configure_sysclk(&mut self, source: SysClkSource) -> Result<()> {
    // TODO: Write
    self.sysclk_source = source;
    Ok(())
  }

  pub fn get_sysclk_freq(&self) -> u32 {
    match self.sysclk_source {
      SysClkSource::Hsi => self.hsi_freq,
      SysClkSource::Hse => self.hse_freq,
      SysClkSource::PllClk => self.get_pll_freq(),
    }
  }

  fn read_mco_source() -> McoSource {
    // TODO: Read
    McoSource::SysClk
  }

  pub fn configure_mco_source(&mut self, source: McoSource) -> Result<()> {
    // TODO: Write
    self.mco_source = source;
    Ok(())
  }

  pub fn get_mco_freq(&self) -> u32 {
    match self.mco_source {
      McoSource::Hsi => self.hsi_freq,
      McoSource::Lse => self.lse_freq,
      McoSource::Hse => self.hse_freq,
      McoSource::PllClk => self.get_pll_freq(),
      McoSource::Lsi => self.lsi_freq,
      McoSource::SysClk => self.get_sysclk_freq(),
    }
  }

  fn read_ahb_prescaler_div() -> u32 {
    // TODO: Read
    1
  }

  fn read_cortex_systimer_div() -> u32 {
    // TODO: Read
    1
  }

  fn read_apb1_prescaler_div() -> u32 {
    // TODO: Read
    2
  }

  fn read_apb2_prescaler_div() -> u32 {
    // TODO: Read
    2
  }

  pub fn configure_ahb(&mut self, ahb_prescaler_div: u32, cortex_systimer_div: u32, apb1_prescaler_div: u32, apb2_prescaler_div: u32) -> Result<()> {
    validate_in_set(ahb_prescaler_div, &[1, 2, 4, 8, 16, 64, 128, 256])?;
    validate_in_set(cortex_systimer_div, &[1, 8])?;
    validate_in_set(apb1_prescaler_div, &[1, 2, 4, 8, 16])?;
    validate_in_set(apb2_prescaler_div, &[1, 2, 4, 8, 16])?;

    // TODO: Write
    self.ahb_prescaler_div = ahb_prescaler_div;
    self.cortex_systimer_div = cortex_systimer_div;
    self.apb1_prescaler_div = apb1_prescaler_div;
    self.apb2_prescaler_div = apb2_prescaler_div;
    Ok(())
  }

  pub fn get_hclk_freq(&self) -> u32 {
    self.get_sysclk_freq() / self.ahb_prescaler_div
  }

  pub fn get_ahb_freq(&self) -> u32 {
    self.get_hclk_freq()
  }

  pub fn get_cortex_systimer_freq(&self) -> u32 {
    self.get_hclk_freq() / self.cortex_systimer_div
  }

  pub fn get_fclk_freq(&self) -> u32 {
    self.get_hclk_freq()
  }

  pub fn get_pclk1_freq(&self) -> u32 {
    self.get_hclk_freq() / self.apb1_prescaler_div
  }

  pub fn get_apb1_peripheral_freq(&self) -> u32 {
    self.get_pclk1_freq()
  }

  pub fn get_apb1_timer_freq(&self) -> u32 {
    self.get_pclk1_freq() * 2
  }

  pub fn get_pclk2_freq(&self) -> u32 {
    self.get_hclk_freq() / self.apb2_prescaler_div
  }

  pub fn get_apb2_peripheral_freq(&self) -> u32 {
    self.get_pclk2_freq()
  }

  pub fn get_apb2_timer_freq(&self) -> u32 {
    self.get_pclk2_freq()
  }
}
