{% for submodule in submodules -%}
pub mod {{submodule}};
{% endfor %}

{% for channel in timer_channels -%}
pub trait {{channel.struct_name()}} {}
{% endfor %}

pub enum DigitalValue {
  High,
  Low
}
impl DigitalValue {
  pub fn val(&self) -> u32 {
    match self {
      Self::High => 1,
      Self::Low => 0
    }
  }

  pub fn from_bool(val: bool) -> Self {
    match val {
      true => DigitalValue::High,
      false => DigitalValue::Low
    }
  } 

  pub fn as_bool(&self) -> bool {
    match self {
      DigitalValue::High => true,
      DigitalValue::Low => false
    }
  } 
}

pub enum PullDirection {
  Up,
  Down,
  Floating
}
impl PullDirection {
  fn val(&self) -> u32 {
    match self {
      Self::Floating => 0b00,
      Self::Up => 0b01,
      Self::Down => 0b10,
    }
  }
}

pub enum OutputType {
  PushPull,
  OpenDrain
}
impl OutputType {
  fn val(&self) -> u32 {
    match self {
      Self::PushPull => 0,
      Self::OpenDrain => 1,
    }
  }
}

pub enum OutputSpeed {
  Low,
  Medium,
  High
}
impl OutputSpeed {
  fn val(&self) -> u32 {
    match self {
      Self::Low => 0b00,
      Self::Medium => 0b01,
      Self::High => 0b11,
    }
  }
}

