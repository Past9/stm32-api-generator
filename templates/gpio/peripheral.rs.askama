use crate::{ set_bit, clear_bit, write_val };
use crate::gpio::{ PullDirection, DummyAltFunc, OutputType, OutputSpeed, DigitalValue };
use core::marker::PhantomData;
use core::ptr;
use cortex_m::interrupt;

use crate::{Error, Result};

pub(crate) fn create() -> {{peripheral.struct_name}} {
  {{peripheral.struct_name}} {
    _private: (),
    {% for pin in peripheral.pins -%}
    has_{{pin.field_name}}: true,
    {% endfor %}
  }
}

#[allow(non_camel_case_types)]
pub struct {{peripheral.struct_name}} { 
  _private: (),
  {% for pin in peripheral.pins -%}
  has_{{pin.field_name}}: bool,
  {% endfor %}
}
impl {{peripheral.struct_name}} {

  pub fn owns_everything(&self) -> bool {
    {% for pin in peripheral.pins -%}
    self.has_{{pin.field_name}} &&
    {% endfor %}
    true
  }
  
  pub(crate) fn enable(&mut self) {
    {{device.set_bit(peripheral.enable_field.clone())}}
  }

  pub(crate) fn disable(&mut self) -> Result<()> {
    if !self.owns_everything() {
      return Err(Error::new("{{peripheral.struct_name}} must own all of its pins before being disabled."))
    }
    {{device.clear_bit(peripheral.enable_field.clone())}}
    Ok(())
  }

  {% for pin in peripheral.pins %}
  pub fn take_{{pin.field_name}}(&mut self) -> Result<{{pin.struct_name}}> {
    match self.has_{{pin.field_name}} {
      true => {
        self.has_{{pin.field_name}} = false;
        Ok({{pin.struct_name}} {
          _private: ()
        })
      },
      false => Err(Error::new("{{pin.struct_name}} is already taken.")),
    }
  }

  pub fn return_{{pin.field_name}}(&mut self, {{pin.field_name}}: {{pin.struct_name}}) -> Result<()> {
    match self.has_{{pin.field_name}} {
      false => {
        self.has_{{pin.field_name}} = true;
        Ok(())
      },
      true => Err(Error::new("{{pin.struct_name}} is already owned by the peripheral.")),
    }
  }
  {% endfor %}
}

{% for pin in peripheral.pins %} 
pub struct {{pin.struct_name}} {
  _private: ()
}
impl {{pin.struct_name}} {
  pub fn as_input(self, pull_dir: PullDirection) -> {{pin.struct_name}}Input {
    {{write_val!(&self.device, pin.moder_field, "0b00")}}
    {{write_val!(&self.device, pin.pupdr_field, "pull_dir.val()")}}
    {{pin.struct_name}}Input { _private: () }
  }

  pub fn as_output(
    self, 
    pull_dir: PullDirection, 
    output_type: OutputType, 
    output_speed: OutputSpeed
  ) -> {{pin.struct_name}}Output {
    {{write_val!(&self.device, pin.moder_field, "0b01")}}
    {{write_val!(&self.device, pin.pupdr_field, "pull_dir.val()")}}
    {{write_val!(&self.device, pin.otyper_field, "output_type.val()")}}
    {{write_val!(&self.device, pin.ospeedr_field, "output_speed.val()")}}
    {{pin.struct_name}}Output { _private: () }
  }

  pub fn as_analog(self) -> {{pin.struct_name}}Analog {
    {{pin.as_analog_writer}}
    {{pin.struct_name}}Analog { _private: () }
  }

  #[allow(non_camel_case_types)]
  pub fn as_alt_func<ALT_FUNC>(
    self, 
    pull_dir: PullDirection, 
  ) -> {{pin.struct_name}}AltFunc<ALT_FUNC> 
  where ALT_FUNC: DummyAltFunc
  {
    {{pin.as_alt_func_writer}}
    {{write_val!(&self.device, pin.pupdr_field, "pull_dir.val()")}}
    {{pin.struct_name}}AltFunc {
      alt_func: PhantomData
    }
  }
}

pub struct {{pin.struct_name}}Input { _private: () }

pub struct {{pin.struct_name}}Output { 
  _private: () 
}
impl {{pin.struct_name}}Output {
  pub fn write(&mut self, value: DigitalValue) {
    {{pin.output_value_writer}}
  }

  pub fn teardown(self) -> {{pin.struct_name}} {
    {{pin.reset_output_value_writer}}
    {{pin.reset_pull_dir_writer}}
    {{pin.reset_output_type_writer}}
    {{pin.reset_output_speed_writer}}
    {{pin.reset_mode_writer}}
    {{pin.struct_name}} { _private: () } 
  }
}

pub struct {{pin.struct_name}}Analog { _private: () }

#[allow(non_camel_case_types)]
pub struct {{pin.struct_name}}AltFunc<ALT_FUNC> 
  where ALT_FUNC: DummyAltFunc
{ 
  alt_func: PhantomData<ALT_FUNC>
}

{% endfor %}